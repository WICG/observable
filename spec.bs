<pre class="metadata">
Title: Observable
Shortname: observable
Repository: WICG/observable
Inline Github Issues: true
Group: WICG
Status: CG-DRAFT
Level: 1
URL: https://wicg.github.io/observable/
Boilerplate: omit conformance, omit feedback-header
Editor: Dominic Farolino, Google https://www.google.com/, domfarolino@gmail.com, https://domfarolino.com
Abstract: The Observable API provides a composable, ergonomic way of handling an asynchronous stream of events
!Participate: <a href="https://github.com/WICG/observable">GitHub WICG/observable</a> (<a href="https://github.com/WICG/observable/issues/new">new issue</a>, <a href="https://github.com/WICG/observable/issues?state=open">open issues</a>)
!Commits: <a href="https://github.com/WICG/observable/commits/master/spec.bs">GitHub spec.bs commits</a>
Complain About: accidental-2119 yes, missing-example-ids yes
Indent: 2
Default Biblio Status: current
Markup Shorthands: markdown yes
Assume Explicit For: yes
WPT Display: open
</pre>

<pre class="link-defaults">
</pre>
<pre class="anchors">
urlPrefix: https://tc39.es/ecma262/#; spec: ECMASCRIPT
  type: dfn
    text: current realm
</pre>

<style>
/* Put nice boxes around each algorithm. */
[data-algorithm]:not(.heading) {
  padding: .5em;
  border: thin solid #ddd; border-radius: .5em;
  margin: .5em calc(-0.5em - 1px);
}
[data-algorithm]:not(.heading) > :first-child {
  margin-top: 0;
}
[data-algorithm]:not(.heading) > :last-child {
  margin-bottom: 0;
}
[data-algorithm] [data-algorithm] {
  margin: 1em 0;
}

.selected-text-file-an-issue {
  position: fixed;
  bottom: 0;
  right: 0;
  background: rgba(255, 255, 255, 0.8);
  font-size: smaller;
  padding: 4px 10px;
  z-index: 4;
}

dfn var {
  font-style: italic;
}

table {
  margin: 1em 0;
}

/* WHATWG-style <hr>s, instead of WICG-style. Specific selector is necessary to override WICG styles. */
:not(.head) > :not(.head) + hr {
  display: block;
  background: none;
  border: none;
  padding: 0;
  margin: 3em 0;
  height: auto;
}
:not(.head) > :not(.head) + hr::before {
  content: none;
}

/* WHATWG-style element definition class */
.element {
  background: #EEFFEE;
}
dt {
  margin-top: 12px;
  color: black;
}
dl, dd {
  padding-left: .5em;
}

/* domintro from https://resources.whatwg.org/standard.css */
.domintro {
  position: relative;
  color: green;
  background: #DDFFDD;
  margin: 2.5em 0 2em 0;
  padding: 1.5em 1em 0.5em 2em;
}

.domintro dt, .domintro dt * {
  color: black;
  font-size: inherit;
}
.domintro dd {
  margin: 0.5em 0 1em 2em; padding: 0;
}
.domintro dd p {
  margin: 0.5em 0;
}
.domintro::before {
  content: 'For web developers (non-normative)';
  background: green;
  color: white;
  padding: 0.15em 0.25em;
  font-style: normal;
  position: absolute;
  top: -0.8em;
  left: -0.8em;
}

/* .XXX from https://resources.whatwg.org/standard.css */
.XXX {
  color: #D50606;
  background: white;
  border: solid #D50606;
}
</style>

<script src="https://resources.whatwg.org/file-issue.js" async></script>

<h2 id=introduction>Introduction</h2>

*This section is non-normative.*

<h2 id=core-infrastructure>Core infrastructure</h2>

<h3 id=subscriber-api>The {{Subscriber}} interface</h3>

<xmp class=idl>
[Exposed=*]
interface Subscriber {
  undefined next(any value);
  undefined error(any error);
  undefined complete();
  undefined addTeardown(VoidFunction teardown);

  // True after the Subscriber is created, up until either
  // complete()/error() are invoked, or the subscriber unsubscribes. Inside
  // complete()/error(), this attribute is true.
  readonly attribute boolean active;

  readonly attribute AbortSignal signal;
};
</xmp>

Each {{Subscriber}} has a <dfn for=Subscriber>next callback</dfn>, which is an
{{ObserverCallback}}-or-null.

Each {{Subscriber}} has a <dfn for=Subscriber>error callback</dfn>, which is an
{{ObserverCallback}}-or-null.

Each {{Subscriber}} has a <dfn for=Subscriber>complete callback</dfn>, which is a
{{VoidFunction}}-or-null.

Each {{Subscriber}} has a <dfn for=Subscriber>complete or error controller</dfn>, which is an
{{AbortController}}.

Each {{Subscriber}} has a <dfn for=Subscriber>signal</dfn>, which is an {{AbortSignal}}.

Note: This is a [=create a dependent abort signal|dependent signal=], derived from both
[=Subscriber/complete or error controller=]'s [=AbortController/signal=], and
{{SubscribeOptions}}'s {{SubscribeOptions/signal}} (if non-null).

Each {{Subscriber}} has a <dfn for=Subscriber>active</dfn> boolean, initially true.

Note: This is a bookkeeping variable to ensure that a {{Subscriber}} never calls any of the
callbacks it owns after it has been [=close a subscription|closed=].

<div algorithm>
  The <dfn for=Subscriber method><code>next(|value|)</code></dfn> method steps are:

    1. If [=this=]'s [=relevant global object=]'s [=associated Document=] is not [=Document/fully
       active=], then return.

    1. If [=this=]'s [=Subscriber/next callback=] is non-null, [=invoke=] this's [=Subscriber/next
       callback=] with |value|.

       If <a spec=webidl lt="an exception was thrown">an exception |E| was thrown</a>, then [=report
       the exception=] |E|.
</div>

<div algorithm>
  The <dfn for=Subscriber method><code>error(|error|)</code></dfn> method steps are:

    1. If [=this=]'s [=relevant global object=]'s [=associated Document=] is not [=Document/fully
       active=], then return.

    1. Let |callback| be [=this=]'s [=Subscriber/error callback=].

    1. [=close a subscription|Close=] [=this=].

    1. If |callback| is not null, [=invoke=] |callback| with |error|.

       If <a spec=webidl lt="an exception was thrown">an exception |E| was thrown</a>, then [=report
       the exception=] |E|.

    1. Otherwise, [=report the exception=] |error|.

    1. [=AbortController/Signal abort=] [=this=]'s [=Subscriber/complete or error controller=].
</div>

<div algorithm>
  The <dfn for=Subscriber method><code>complete()</code></dfn> method steps are:

    1. If [=this=]'s [=relevant global object=]'s [=associated Document=] is not [=Document/fully
       active=], then return.

    1. Let |callback| be [=this=]'s [=Subscriber/complete callback=].

    1. [=close a subscription|Close=] [=this=].

    1. If |callback| is not null, [=invoke=] |callback|.

       If <a spec=webidl lt="an exception was thrown">an exception |E| was thrown</a>, then [=report
       the exception=] |E|.

    1. [=AbortController/Signal abort=] [=this=]'s [=Subscriber/complete or error controller=].
</div>

<div algorithm>
  To <dfn>close a subscription</dfn> given a {{Subscriber}} |subscriber|, run these steps:

    1. Set |subscriber|'s [=Subscriber/active=] boolean to false.

    1. Set |subscriber|'s [=Subscriber/next callback=], [=Subscriber/error callback=], and
       [=Subscriber/complete callback=] all to null.

  <div class=note>
    <p>This algorithm intentionally does not have script-running side-effects; it just updates the
    internal state of a {{Subscriber}}. It's important that this algorithm sets
    [=Subscriber/active=] to false and clears all of the callback algorithms *before* running any
    script, because running script <span class=allow-2119>may</span> reentrantly invoke one of the
    methods that closed the subscription in the first place. And closing the subscription <span
    class=allow-2119>must</span> ensure that even if a method gets reentrantly invoked, none of the
    {{Observer}} callbacks are ever invoked again. Consider this example:</p>

    <div class=example id=reentrant-example>
      <pre highlight=js>
let innerSubscriber = null;
const producedValues = [];

const controller = new AbortController();
const observable = new Observable(subscriber =&gt; {
  innerSubscriber = subscriber;
  subscriber.complete();
});

observable.subscribe({
  next: v =&gt; producedValues.push(v),
  complete: () =&gt; innerSubscriber.next('from complete'),

  }, {signal: controller.signal}
);

// This invokes the complete() callback, and even though it invokes next() from
// within, the given next() callback will never run, because the subscription
// has already been "closed" before the complete() callback actually executes.
controller.abort();
console.assert(producedValues.length === 0);
      </pre>
    </div>
  </div>
</div>

<h3 id=observable-api>The {{Observable}} interface</h3>

<xmp class=idl>
// SubscribeCallback is where the Observable "creator's" code lives. It's
// called when subscribe() is called, to set up a new subscription.
callback SubscribeCallback = undefined (Subscriber subscriber);
callback ObserverCallback = undefined (any value);

dictionary Observer {
  ObserverCallback next;
  ObserverCallback error;
  VoidFunction complete;
};

typedef (ObserverCallback or Observer) ObserverUnion;

dictionary SubscribeOptions {
  AbortSignal signal;
};

dictionary PromiseOptions {
  AbortSignal signal;
};

callback Predicate = boolean (any value);
callback Reducer = any (any accumulator, any currentValue);
callback Mapper = any (any element, unsigned long long index);
// Differs from Mapper only in return type, since this callback is exclusively
// used to visit each element in a sequence, not transform it.
callback Visitor = undefined (any element, unsigned long long index);

[Exposed=*]
interface Observable {
  constructor(SubscribeCallback callback);
  undefined subscribe(optional ObserverUnion observer = {}, optional SubscribeOptions options = {});

  undefined finally(VoidFunction callback);

  // Constructs a native Observable from value if it's any of the following:
  //   - Observable
  //   - AsyncIterable
  //   - Iterable
  //   - Promise
  static Observable from(any value);

  // Observable-returning operators. See "Operators" section in the spec.
  //
  // takeUntil() can consume promises, iterables, async iterables, and other
  // observables.
  Observable takeUntil(any notifier);
  Observable map(Mapper mapper);
  Observable filter(Predicate predicate);
  Observable take(unsigned long long amount);
  Observable drop(unsigned long long amount);
  Observable flatMap(Mapper mapper);

  // Promise-returning operators.
  Promise<sequence<any>> toArray(optional PromiseOptions options = {});
  Promise<undefined> forEach(Visitor callback, optional PromiseOptions options = {});
  Promise<boolean> every(Predicate predicate, optional PromiseOptions options = {});
  // Maybe? Promise<any> first(optional PromiseOptions options = {});
  Promise<any> find(Predicate predicate, optional PromiseOptions options = {});
  Promise<boolean> some(Predicate predicate, optional PromiseOptions options = {});
  Promise<any> reduce(Reducer reducer, optional any initialValue, optional PromiseOptions options = {});
};
</xmp>

Each {{Observable}} has a <dfn for=Observable>subscribe callback</dfn>, which is a
{{SubscribeCallback}}.

Issue: Make [=Observable/subscribe callback=] either a {{SubscribeCallback}} or a set of steps that
can be passed in by natively-constructed {{Observable}}s.

<div algorithm>
  The <dfn for=Observable constructor lt="Observable(callback)"><code>new
  Observable(|callback|)</code></dfn> constructor steps are:

    1. Set [=this=]'s [=Observable/subscribe callback=] to |callback|.

      Note: This callback will get invoked later when {{Observable/subscribe()}} is called.
</div>

<div algorithm>
  The <dfn for=Observable method><code>subscribe(|observer|, |options|)</code></dfn> method steps
  are:

    1. If [=this=]'s [=relevant global object=]'s [=associated Document=] is not [=Document/fully
       active=], then return.

    1. Let |nextCallback|, |errorCallback|, and |completeCallback| all be null.

    1. If |observer| is an {{ObserverCallback}}, then set |nextCallback| to |observer|.

    1. Otherwise:

      1. [=Assert=]: |observer| is an {{Observer}}.

      1. Set |nextCallback| to |observer|'s {{Observer/next}}.

      1. Set |errorCallback| to |observer|'s {{Observer/error}}.

      1. Set |completeCallback| to |observer|'s {{Observer/complete}}.

    1. Let |subscriber| be a [=new=] {{Subscriber}}, initialized as:

      : [=Subscriber/next callback=]
      :: |nextCallback|

      : [=Subscriber/error callback=]
      :: |errorCallback|

      : [=Subscriber/complete callback=]
      :: |completeCallback|

      : [=Subscriber/signal=]
      :: The result of [=creating a dependent abort signal=] from the list «|subscriber|'s
         [=Subscriber/complete or error controller=]'s [=AbortController/signal=], |options|'s
         {{SubscribeOptions/signal}} if it is non-null», using {{AbortSignal}}, and the [=current
         realm=].

    1. If |subscriber|'s [=Subscriber/signal=] is [=AbortSignal/aborted=], then [=close a
       subscription|close=] |subscriber|.

       Note: This can happen when {{SubscribeOptions}}'s {{SubscribeOptions/signal}} is already
       [=AbortSignal/aborted=].

    1. [=Invoke=] [=this=]'s [=Observable/subscribe callback=] with |subscriber|.

       If <a spec=webidl lt="an exception was thrown">an exception |E| was thrown</a>, call
       |subscriber|'s {{Subscriber/error()}} method with |E|.
</div>

<h3 id=operators>Operators</h3>

For now, see [https://github.com/wicg/observable#operators](https://github.com/wicg/observable#operators).

<h2 id=event-target-integration>{{EventTarget}} integration</h2>

<pre class=idl>
dictionary ObservableEventListenerOptions {
  boolean capture = false;
  boolean passive;
};

partial interface EventTarget {
  Observable on(DOMString type, optional ObservableEventListenerOptions options = {});
};
</pre>


<h2 id=security-and-privacy>Security & Privacy Considerations</h2>

This material is being upstreamed from our explainer into this specification, and in the meantime
you can consult the following resources:

 * [TAG Security/Privacy Questionnaire](https://github.com/WICG/observable/blob/master/security-privacy-questionnaire.md)

<h2 id=acks>Acknowledgements</h2>

A special thanks to [Ben Lesh](https://benlesh.com/) for much of the design
input for the {{Observable}} API, and his many years of work maintaining
userland Observable code that made this contribution to the web platform
possible.
